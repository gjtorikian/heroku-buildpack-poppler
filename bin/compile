#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2

# debugm
# set -x
echo "-----> We are building libpixman and lippoppler in '$PWD' with contents:"
ls -a
echo "-----> Present PATH's:"
echo "HOME: '$HOME'"
echo "BUILD_DIR: '$BUILD_DIR'"
echo "CACHE_DIR: '$CACHE_DIR'"
echo "PATH: '$PATH'"
echo "LD_RUN_PATH: '$LD_RUN_PATH'"
echo "LD_LIBRARY_PATH: '$LD_LIBRARY_PATH'"
echo "PKG_CONFIG_PATH: '$PKG_CONFIG_PATH'"

### libgdkpixbuf is required for libcairo
if [[ "Darwin" == "$(uname)" ]]
then
  VENDORED_LIBGDKPIXBUF="$HOME/Code/heroku-buildpack-libgdkpixbuf/vendor/libgdkpixbuf" # Just for my local laptop testing
else
  VENDORED_LIBGDKPIXBUF="/app/vendor/libgdkpixbuf"
fi

# fetch and cache the source tar ball
LIBGDKPIXBUF_PACKAGE="http://ftp.gnome.org/pub/gnome/sources/gdk-pixbuf/2.30/gdk-pixbuf-2.30.2.tar.xz"
LIBGDKPIXBUF_PACKAGE_ETAG=$(curl -s --head "$LIBGDKPIXBUF_PACKAGE" | grep -Ei '^etag' | sed -r 's/^etag|[^a-zA-Z0-9]+//gi')
LIBGDKPIXBUF_CACHE="$CACHE_DIR/libgdkpixbuf_$LIBGDKPIXBUF_PACKAGE_ETAG";
LIBGDKPIXBUF_DIRNAME="gdk-pixbuf-2.30.2"

if [ -d "$LIBGDKPIXBUF_CACHE" ]; then
  echo "-----> Reusing cached libgdkpixbuf ($LIBGDKPIXBUF_PACKAGE_ETAG)"
  cp -a $LIBGDKPIXBUF_CACHE $VENDORED_LIBGDKPIXBUF
else
  echo "-----> Fetching and caching libgdkpixbuf ($LIBGDKPIXBUF_PACKAGE_ETAG)"
  mkdir -p $VENDORED_LIBGDKPIXBUF
  curl $LIBGDKPIXBUF_PACKAGE -o - | tar xJf - -C $VENDORED_LIBGDKPIXBUF
  mkdir -p $CACHE_DIR
  cp -a $VENDORED_LIBGDKPIXBUF $LIBGDKPIXBUF_CACHE
fi

cd $VENDORED_LIBGDKPIXBUF/$LIBGDKPIXBUF_DIRNAME
CFLAGS='-fPIC -Wall -g -O2' CXXFLAGS='-fPIC -Wall -g -O2' png_CFLAGS='-fPIC -Wall -g -O2' ./configure --prefix=$VENDORED_LIBGDKPIXBUF --with-pic --enable-static --disable-shared
make -j5
make install
cd ..
rm -fr $LIBGDKPIXBUF_DIRNAME
export LD_RUN_PATH="$VENDORED_LIBGDKPIXBUF/lib:$LD_RUN_PATH"
export LD_LIBRARY_PATH="$LD_RUN_PATH"
export PKG_CONFIG_PATH="$VENDORED_LIBGDKPIXBUF/lib/pkgconfig:$PKG_CONFIG_PATH"
### End libgdkpixbuf stuff

### fontconfig is required for libcairo
if [[ "Darwin" == "$(uname)" ]]
then
  VENDORED_FONTCONFIG="$HOME/Code/heroku-buildpack-fontconfig/vendor/fontconfig" # Just for my local laptop testing
else
  VENDORED_FONTCONFIG="/app/vendor/fontconfig"
fi

# fetch and cache the source tar ball
FONTCONFIG_PACKAGE="http://www.freedesktop.org/software/fontconfig/release/fontconfig-2.11.0.tar.bz2"
FONTCONFIG_PACKAGE_ETAG=$(curl -s --head "$FONTCONFIG_PACKAGE" | grep -Ei '^etag' | sed -r 's/^etag|[^a-zA-Z0-9]+//gi')
FONTCONFIG_CACHE="$CACHE_DIR/fontconfig_$FONTCONFIG_PACKAGE_ETAG";
FONTCONFIG_DIRNAME="fontconfig-2.11.0"

if [ -d "$FONTCONFIG_CACHE" ]; then
  echo "-----> Reusing cached fontconfig ($FONTCONFIG_PACKAGE_ETAG)"
  cp -a $FONTCONFIG_CACHE $VENDORED_FONTCONFIG
else
  echo "-----> Fetching and caching fontconfig ($FONTCONFIG_PACKAGE_ETAG)"
  mkdir -p $VENDORED_FONTCONFIG
  curl $FONTCONFIG_PACKAGE -o - | tar xjf - -C $VENDORED_FONTCONFIG
  mkdir -p $CACHE_DIR
  cp -a $VENDORED_FONTCONFIG $FONTCONFIG_CACHE
fi

cd $VENDORED_FONTCONFIG/$FONTCONFIG_DIRNAME
CFLAGS='-fPIC -Wall -g -O2' CXXFLAGS='-fPIC -Wall -g -O2' png_CFLAGS='-fPIC -Wall -g -O2' ./configure --prefix=$VENDORED_FONTCONFIG --with-pic --enable-static --disable-shared
make -j5
make install
cd ..
rm -fr $FONTCONFIG_DIRNAME
export LD_RUN_PATH="$VENDORED_FONTCONFIG/lib:$LD_RUN_PATH"
export LD_LIBRARY_PATH="$LD_RUN_PATH"
export PKG_CONFIG_PATH="$VENDORED_FONTCONFIG/lib/pkgconfig:$PKG_CONFIG_PATH"
### End fontconfig stuff

### libpoppler is required for libcairo
if [[ "Darwin" == "$(uname)" ]]
then
  VENDORED_LIBPOPPLER="$HOME/Code/heroku-buildpack-libpoppler/vendor/libpoppler" # Just for my local laptop testing
else
  VENDORED_LIBPOPPLER="/app/vendor/libpoppler"
fi

# fetch and cache the source tar ball
LIBPOPPLER_PACKAGE="http://poppler.freedesktop.org/poppler-0.24.4.tar.xz"
LIBPOPPLER_PACKAGE_ETAG=$(curl -s --head "$LIBPOPPLER_PACKAGE" | grep -Ei '^etag' | sed -r 's/^etag|[^a-zA-Z0-9]+//gi')
LIBPOPPLER_CACHE="$CACHE_DIR/libpoppler_$LIBPOPPLER_PACKAGE_ETAG";
LIBPOPPLER_DIRNAME="poppler-0.24.4"

if [ -d "$LIBPOPPLER_CACHE" ]; then
  echo "-----> Reusing cached libpoppler ($LIBPOPPLER_PACKAGE_ETAG)"
  cp -a $LIBPOPPLER_CACHE $VENDORED_LIBPOPPLER
else
  echo "-----> Fetching and caching libpoppler ($LIBPOPPLER_PACKAGE_ETAG)"
  mkdir -p $VENDORED_LIBPOPPLER
  curl $LIBPOPPLER_PACKAGE -o - | tar xJf - -C $VENDORED_LIBPOPPLER
  mkdir -p $CACHE_DIR
  cp -a $VENDORED_LIBPOPPLER $LIBPOPPLER_CACHE
fi

cd $VENDORED_LIBPOPPLER/$LIBPOPPLER_DIRNAME
CFLAGS='-fPIC -Wall -g -O2' CXXFLAGS='-fPIC -Wall -g -O2' png_CFLAGS='-fPIC -Wall -g -O2' ./configure --prefix=$VENDORED_LIBPOPPLER --with-pic --enable-static --disable-shared
make -j5
make install
cd ..
rm -fr $LIBPOPPLER_DIRNAME
export LD_RUN_PATH="$VENDORED_LIBPOPPLER/lib:$LD_RUN_PATH"
export LD_LIBRARY_PATH="$LD_RUN_PATH"
export PKG_CONFIG_PATH="$VENDORED_LIBPOPPLER/lib/pkgconfig:$PKG_CONFIG_PATH"
### End libpoppler stuff

echo "-----> Building runtime environment"
cd $BUILD_DIR
mkdir -p .profile.d
echo "export VENDORED_FONTCONFIG=\"$VENDORED_FONTCONFIG\"" > .profile.d/libpoppler.sh
echo "export VENDORED_LIBGDKPIXBUF=\"$VENDORED_LIBGDKPIXBUF\"" >> .profile.d/libpoppler.sh
echo "export VENDORED_LIBPOPPLER=\"$VENDORED_LIBPOPPLER\"" >> .profile.d/libpoppler.sh
echo "export PATH=\"\$VENDORED_LIBGDKPIXBUF/bin:\$VENDORED_FONTCONFIG/bin:\$VENDORED_LIBPOPPLER/bin:\$PATH\"" >> .profile.d/libpoppler.sh
echo "export LD_RUN_PATH=\"\$VENDORED_LIBGDKPIXBUF/lib:\$VENDORED_FONTCONFIG/lib:\$VENDORED_LIBPOPPLER/lib:\$LD_RUN_PATH\"" >> .profile.d/libpoppler.sh
echo "export LD_LIBRARY_PATH=\"\$VENDORED_LIBGDKPIXBUF/lib:\$VENDORED_FONTCONFIG/lib:\$VENDORED_LIBPOPPLER/lib:\$LD_LIBRARY_PATH\"" >> .profile.d/libpoppler.sh
echo "export PKG_CONFIG_PATH=\"\$VENDORED_LIBGDKPIXBUF/lib/pkgconfig:\$VENDORED_FONTCONFIG/lib/pkgconfig:\$VENDORED_LIBPOPPLER/lib/pkgconfig:\$PKG_CONFIG_PATH\"" >> .profile.d/libpoppler.sh
cat .profile.d/libpoppler.sh
