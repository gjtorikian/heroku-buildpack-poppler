# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2

# debugm
# set -x
echo "-----> We are building lippoppler and dependencies in '$PWD' with contents:"
ls -a
echo "-----> Present PATH's:"
echo "HOME: '$HOME'"
echo "BUILD_DIR: '$BUILD_DIR'"
echo "CACHE_DIR: '$CACHE_DIR'"
echo "PATH: '$PATH'"
echo "LD_RUN_PATH: '$LD_RUN_PATH'"
echo "LD_LIBRARY_PATH: '$LD_LIBRARY_PATH'"
echo "PKG_CONFIG_PATH: '$PKG_CONFIG_PATH'"

pkg_install()
{
    echo "pkg_install called with args: '$1' '$2' '$3' '$4' '$5'" 
    dir="$1"
    url="$2"
    taropt="$3"
    config_flags="$4"
    cache_prefix="$5"

    if [[ "Darwin" == "$(uname)" ]]
    then
	prefix="$HOME/Code/heroku-buildpack-poppler/vendor/local" # Just for my local laptop testing
    else
	prefix="/app/vendor/local"
    fi
    
    # fetch and cache the source tar ball
    etag=$(curl -L -s --head "$url" | grep -Ei '^etag' | sed -r 's/^etag|[^a-zA-Z0-9]+//gi')
    cache_dir="${cache_prefix}/${dir}_${etag}";
    
    if [ -d "$cache_dir" ]; then
	echo "-----> Reusing cached '$dir' ($etag)"
	cp -a $cache_dir $prefix
    else
	echo "-----> Fetching and caching '$dir' ($etag)"
	mkdir -p $prefix
	curl -L "$url" -o - | tar x${taropt}f - -C $prefix
	mkdir -p $cache_prefix
	cp -a $prefix $cache_dir
    fi
    
    cd $prefix/$dir
    CFLAGS='-fPIC -Wall -g -O2' CXXFLAGS='-fPIC -Wall -g -O2' png_CFLAGS='-fPIC -Wall -g -O2' ./configure --prefix=$prefix ${config_flags}
    make -j5
    make install
    cd ..
    rm -fr $dir

    echo "New present contents of '$prefix' is:"
    ls -aFC $prefix
    echo "New present contect of '$prefix/lib' is:"
    ls -aFC $prefix/lib
    echo "New present contents of '$prefix/lib/pkgconfig' is:"
    ls -aFC $prefix/lib/pkgconfig

    export LD_RUN_PATH="$prefix/lib:$LD_RUN_PATH"
    export LD_LIBRARY_PATH="$LD_RUN_PATH"
    export PKG_CONFIG_PATH="$prefix/lib/pkgconfig:$PKG_CONFIG_PATH"
}

cIFS="$IFS"
IFS='
'

read -r -d '' -a pkgs <<"~"
libffi-3.0.13,ftp://sourceware.org/pub/libffi/libffi-3.0.13.tar.gz,J,
glib-2.38.2,http://ftp.gnome.org/pub/gnome/sources/glib/2.38/glib-2.38.2.tar.xz,J,--with-pic --enable-static --disable-shared
gdk-pixbuf-2.30.2,http://ftp.gnome.org/pub/gnome/sources/gdk-pixbuf/2.30/gdk-pixbuf-2.30.2.tar.xz,J,--with-pic --enable-static --disable-shared
~

IFS="$cIFS"

declare -i pcnt=0
while (( pcnt < ${#pkgs[@]} ))
do
    echo "======================================"
    echo "'${pkgs[pcnt]}'"
    dir=$(echo "${pkgs[pcnt]}" | cut -f1 -d,)
    url=$(echo "${pkgs[pcnt]}" | cut -f2 -d,)
    taropt=$(echo "${pkgs[pcnt]}" | cut -f3 -d,)
    flags=$(echo "${pkgs[pcnt]}" | cut -f4 -d,)
    echo "Will download '$dir' from '$url', untar with '$taropt' and configure with '$flags'"
    pkg_install "$dir" "$url" "$taropt" "$flags" "$CACHE_DIR"
    echo
    echo
    ((pcnt = pcnt + 1 ))
done

echo "-----> Building runtime environment"
cd $BUILD_DR
mkdir -p .profile.d
echo "export PATH=\"/app/vendor/local:\$PATH\"" > .profile.d/libpoppler.sh
echo "export LD_RUN_PATH=\"/app/vendor/local/lib:\$LD_RUN_PATH\"" >> .profile.d/libpoppler.sh
echo "export LD_LIBRARY_PATH=\"/app/vendor/local/lib:\$LD_LIBRARY_PATH\"" >> .profile.d/libpoppler.sh
echo "export PKG_CONFIG_PATH=\"/app/vendor/local/lib/pkgconfig:\$PKG_CONFIG_PATH\"" >> .profile.d/libpoppler.sh
cat .profile.d/libpoppler.sh
